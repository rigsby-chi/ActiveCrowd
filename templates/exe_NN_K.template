import sys
from sklearn.neighbors import KNeighborsClassifier
from mturk.MTurkConnector import MTurkConnector
from mturk.LearningAutomation import LearningAutomation
from mturk.my_utils import Logger, Recorder

projectName = "{0}"
propertiesFile = "project/{0}/mturk.properties"
questionFile = "project/{0}/mturk.question"

#MTurk config dict
activeMTurk = {1}

#SKLearn config dict
sk = {2}

#Funcitons
{3}

db = {4}

def execute(useSandbox, stopAtAmount, stopAtErrorRate = None):
  logger = Logger(projectName, db['db'], db['db_user'], db['db_password'])
  recorder = Recorder(projectName, db['db'], db['db_user'], db['db_password'])
  try:
    logger.log('info', '--------- Execution starts ---------')
    if not stopAtAmount == 0:
      recorder.record(recordType='start', useSandbox=int(useSandbox), stopAtErrorRate=stopAtErrorRate, stopAtLabeledSamples=stopAtAmount, sklearnSetting = sk)
    
    #Create MTurk Connector instance for MTurk Communication
    mc = {5}
    
    #Create classifier object
    clf = KNeighborsClassifier(n_neighbors = sk['n_neighbors'], \
              weights = sk['weights'], \
              leaf_size = sk['leaf_size'], \
              algorithm = sk['algorithm'], \
              metric = sk['metric'], \
              p = sk['p'], \
              metric_params = sk['metric_params'])
    
    #Create learning automation layer instance
    la = learner(project = projectName, \
                     useDB = True,
                     db = db['db'],
                     db_user = db['db_user'],
                     db_password = db['db_password'],
                     root_path = 'project', \
                     clf = clf, \
                     mc = mc,
                     logger = logger,
                     recorder = recorder)
                     
    #Start active learning
    resultClf = {6}
                        
    if not stopAtAmount == 0:
      recorder.record(recordType='finish')
    logger.log('success', '--------- Execution completed ---------')
  except Exception, e:
    traceback.print_exc()
    recorder.record(recordType='finishWithError')
    self.logger.log('danger', 'Unexpected Error: ' + e.message)
    logger.log('info', '--------- Execution terminated with errors ---------')
  finally:
    sys.exit()

{7}
